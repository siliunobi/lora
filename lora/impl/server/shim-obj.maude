load socket

mod BUFFERED-SOCKET is
  pr NAT .
  inc SOCKET .

  sort BufferedSocket .
  subsort BufferedSocket < Cid .
  op BufferedSocket : -> BufferedSocket .

  op read :_ : String -> Attribute [ctor gather(&)] .
  ---(
  op bState :_ : BState -> Attribute [ctor gather(&)] .
  op waiting :_ : Bool -> Attribute [ctor gather(&)] .
  op complete :_ : FindResult -> Attribute [ctor gather(&)] .
  )

  op b : Oid -> Oid .   *** buffered sockets ids are marked with a b operator,
                        *** i.e., the buffers associated to a socket SOCKET
                        *** have identifier b(SOCKET); note that there is a
                        *** BufferedSocket on each side of the socket, that is,
                        *** there are two objects with the same id, but in different
                        *** configurations.
endm

mod SHIM is
  pr CONFIGURATION .

  sort Shim .  *** Shim has as ID l(IP,0), e.g., l("localhost",0)
  subsort Shim < Cid .
  op Shim : -> Shim .

  *** stores all generated sockets
  *** server-side: one additional buffer for listening for clients;
  ***              other buffers corresponds to clients
  op sockets :_ : Configuration -> Attribute [ctor gather(&)] .   

  op bufferedMsgs :_ : Configuration -> Attribute [ctor gather(&)] . 


  sort Skts . 
  op empty : -> Skts .
  *** self, socket, target
  op <_,_,_> : Oid Oid Oid -> Skts [ctor] .
  op _;_ : Skts Skts -> Skts [ctor assoc comm id: empty] .
 
  op contacts :_ : Skts -> Attribute [ctor gather(&)] .
  op null : -> Oid .


  ---??? some attr for fileManager stuff
  --- op bufferedWrites :_ : storing Maude terms, which 
  --- would be tranlated into strings when flushed
  --- e.g., written values can be stored in "bufferedWrites",
  --- and then be flushed into disk when some requirements meeted

  ---??? we also need to deal with "read a file"
  --- upon receiving a read request, a server will read a file by 
  --- "getLine" or "getChars"
  --- an attr needed here??? k |-> line, so we can jump into that 
  --- line to read or write k


  sorts ClientShim ServerShim .  
  subsorts ClientShim ServerShim < Shim .
  op ClientShim : -> ClientShim [ctor] .
  op ServerShim : -> ServerShim [ctor] .

  --- op client-analysis-state :_ : ... -> Attribute [ctor gather(&)] . 
  --- e.g., counting the number of committed/aborted txns
  --- further propositions will be defined over those numbers
  --- or log the returned values for consistency check
  --- op server-analysis-state :_ : ... -> Attribute [ctor gather(&)] . 
endm

