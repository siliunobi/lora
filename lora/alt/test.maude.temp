load initial-states

mod RAMP-SNOW-ANALYSIS is
  including INITIAL-STATES .
  including APMAUDE .
  including MODEL-CHECKER .
  including RAMP-F .

  subsort Config < State .
  
  eq LIMIT = 1.0e+100 .

  op initConfig : -> Config .
  eq initConfig = run(initState,LIMIT) .

  ops x y z : -> Key .
  ops tb r1 r2 r3 t1 t2 t3 t4 : -> Address .
  ops xl yl zl : -> LocalVar .

  
  --- init(RTX,WTX,RWTX,CLS,DCS,REPLS,KEYS,ROPS,WOPS,RWOPS,KAD) 
  eq initState = init($1,$2,0,$3,1,5,$4,$6,$7,0,$5) .


  --- Metrics
  vars T T' T1 T2 T1' T2' NUMBER : Float .
  var C : Config .
  vars M TID TID' : Address .
  vars RECORD RECORD' RECORD'' : Record . 
  vars READS READS' WRITES WRITES' VS VS' : Versions .
  var FLAG : Bool .
  vars TS TS' TS1 TS2 TS1' TS2' : Timestamp .
  vars MD MD' MD1 MD2 MD1' MD2' : KeySet .
  vars V V' V1 V2 V1' V2' : Value .
  vars K K1 K2 : Key .
  vars TIDS TIDS' : AddressSet .
  var AS : AttributeSet .

  --- Throughput
  op totalRunTime : Record -> Float .
  op trt : Record Float -> Float .
  eq totalRunTime(RECORD) = trt(RECORD,0.0) .
  eq trt((record(TID,T1,T2,READS,WRITES,FLAG) ; RECORD),T) = 
       if T2 > T
         then trt(RECORD,T2)
         else trt(RECORD,T)
       fi .
  eq trt(noRecord,T) = T .
         
  op throughput : Config -> Float .
  eq throughput(< M : Monitor | log: RECORD, AS > C) = committedNumber(RECORD) / totalRunTime(RECORD) .

  op committedNumber : Record -> Float .
  op $committedNumber : Record Float -> Float .
  eq committedNumber(RECORD) = $committedNumber(RECORD,0.0) .
  eq $committedNumber((record(TID,T1,T2,READS,WRITES,true) ; RECORD),NUMBER) = 
       $committedNumber(RECORD,NUMBER + 1.0) .
  eq $committedNumber((record(TID,T1,T2,READS,WRITES,false) ; RECORD),NUMBER) = 
       $committedNumber(RECORD,NUMBER) .
  eq $committedNumber(noRecord,NUMBER) = NUMBER .

  --- Commit Rate
  op commitRate : Config -> Float .
  eq commitRate(< M : Monitor | log: RECORD, AS > C) = committedNumber(RECORD) / totalNumber(RECORD) .

  op totalNumber : Record -> Float .
  op $totalNumber : Record Float -> Float .
  eq totalNumber(RECORD) = $totalNumber(RECORD,0.0) .
  eq $totalNumber((record(TID,T1,T2,READS,WRITES,FLAG) ; RECORD),NUMBER) = 
       $totalNumber(RECORD,NUMBER + 1.0) .
  eq $totalNumber(noRecord,NUMBER) = NUMBER .  

  --- Avg Latency
  op avgLatency : Config -> Float .
  eq avgLatency(< M : Monitor | log: RECORD, AS > C) = totalLatency(RECORD) / committedNumber(RECORD) .
  
  op totalLatency : Record -> Float .
  op $totalLatency : Record Float -> Float .
  eq totalLatency(RECORD) = $totalLatency(RECORD,0.0) .
  eq $totalLatency((record(TID,T1,T2,READS,WRITES,true) ; RECORD),NUMBER) =
       $totalLatency(RECORD,NUMBER + T2 - T1) .
  eq $totalLatency((record(TID,T1,T2,READS,WRITES,false) ; RECORD),NUMBER) = 
       $totalLatency(RECORD,NUMBER) .
  eq $totalLatency(noRecord,NUMBER) = NUMBER .
  
  *** 
  op pf : Config -> Float .
  
  *** concurrent reads
  *** assume txns are always committed; owise, need to match TID and "true" TID in LOG
  op cr : Config -> Float .
  op isCr : Config -> Float .
    
*** ryw; ryw vs pf vs cr
*** read latency

  *** read atomicity
  op ra : Config -> Float .
  

  --- PVESTA interfaces
  eq val(0,C) = throughput(C) .
  eq val(1,C) = avgLatency(C) .
  eq val(2,C) = commitRate(C) .
  eq val(3,C) = pf(C) .
  eq val(4,C) = cr(C) .
  eq val(5,C) = isCr(C) .
  eq val(6,C) = ra(C) .
      
endm

---set clear rules off .
---rewrite initConfig .
