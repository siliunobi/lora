*** requires: prelude, term-order
*** comment:  Defines actors and scheduler

fmod ADDRESS is
---  pr NAT .
  pr INT .

  sort Address .
  subsort Int < Address .
  --- Constant address that represents the top level of
  --- the Russian doll tree.
  op toplevel : -> Address .

  --- Addresses are composed of sequences of natural numbers
  op _._ : Address Address -> Address [assoc prec 10] .
  --- Lexicographic order on addresses.
  op _<_ : Address Address -> Bool [ditto] .
  op sizeof : Address -> Nat .
  op prefix : Address Nat -> Address .
  op contains : Address Address -> Bool .

  vars N1 N2 N M : Nat .
  vars AD1 AD2 A : Address .

  eq N1 . AD1 < N2 . AD2 = if N1 == N2 then AD1 < AD2 else N1 < N2 fi .
  eq N1 < N2 . AD2 = if N1 == N2 then true else N1 < N2 fi .
  eq N1 . AD1 < N2 = if N1 == N2 then false else N1 < N2 fi .

  eq sizeof(N) = 1 .
  eq sizeof(A . N) = sizeof(A) + 1 .

  eq prefix(N , 1) = N .
  eq prefix(N . A, 1) = N .
  eq prefix(N . A, s(s(M))) = N . prefix(A, s(M)) .

  eq contains(AD1,AD2) = prefix(AD2,sizeof(AD1)) == AD1 and AD1 < AD2 .
endfm
view Address from TRIV to ADDRESS is sort Elt to Address . endv

fmod DELAY is
  pr FLOAT .
  sort Delay .
  subsort Float < Delay .
  op now    : -> Delay .
  op _lt_   : Delay Delay -> Bool .
  op _plus_ : Delay Delay -> Delay [assoc comm] .

  var F1 F2 : Float .
  var D1    : Delay .

  eq now lt   now = false .
  eq now lt   F1  = true .
  eq F1  lt   now = false .
  eq F1  lt   F2  = F1 < F2 .
  eq now plus D1  = now .
  eq F1  plus F2  = F1 + F2 .
endfm

fmod ACTOR-MODEL is
  pr ADDRESS .
  pr DELAY .
  pr FLOAT .
  pr NAT .

  sorts Actor Config .
  sorts Msg ScheduleMsg ActiveMsg LocScheduleMsg LocActiveMsg .
  --- InertActor is an actor whose sub-config only contains InertActors
  sort InertActor .
  --- ActorConfig represents a soup of actors containing no messages
  sort ActorConfig .
  sort NameGenerator .
  sorts ActorType Attribute AttributeSet Content .

  subsort ScheduleMsg ActiveMsg LocScheduleMsg LocActiveMsg < Config .
  subsorts Actor ActorConfig < Config .
  subsort InertActor < Actor .
  subsort NameGenerator InertActor < ActorConfig .
  subsort Attribute < AttributeSet .

  op null : -> ActorConfig .
  op __ : ActorConfig ActorConfig -> ActorConfig [assoc comm id: null] .
  op __ : Config Config -> Config [assoc comm id: null] .

  op <_> : Address -> NameGenerator .
  op _.new : NameGenerator -> Address .
  op _.next : NameGenerator -> NameGenerator .

  --- Actors MUST store their subconfig in this attribute
  op config:_ : Config -> Attribute [gather(&) format (d ++ n--)] .

  --- Predicate to check if an actor has a subconfig
  op flatActor : Actor -> Bool .

  --- Messages:
  --- Messages contain an Address,Content pair
  op empty : -> Content .
  op _<-_ : Address Content -> Msg .
  op [_,_] : Delay Msg -> ScheduleMsg .
  op {_,_} : Float Msg -> ActiveMsg .
  --- Location bound schedule message.
  op [_,_] : Address ScheduleMsg -> LocScheduleMsg .
  --- Location bound active message.
  op {_,_} : Address ActiveMsg -> LocActiveMsg .
  op content : Msg -> Content .
  op recvr   : Msg -> Address .

  --- Actors:
  op <_:_|_> : Address ActorType AttributeSet -> Actor [format (ni d d d d d d d)] .
  op noActor : -> Actor .

  --- Attributes can be used to add user defined data to an actor
  op mt : -> AttributeSet .
  op _,_ : AttributeSet AttributeSet -> AttributeSet [assoc comm id: mt] .

  var A : Address .
  var T : ActorType .
  var AC : ActorConfig .
  var AS AS' : AttributeSet .
  var ACT : Actor .
  var CO : Content .
  var C : Config .
  var N : Nat .

  eq content(A <- CO) = CO .
  eq   recvr(A <- CO) = A .

  --- An Actor whose subconfig is an ActorConfig is an InertActor
  mb < A : T | config: AC, AS > : InertActor .
  cmb ACT : InertActor if flatActor(ACT).

  eq flatActor(< A : T | config: C, AS >) = false .
  eq flatActor(ACT) = true [owise] .

  eq < A > .new = A .
  eq < A . N > .next = < A . (N + 1) > .
  eq < N > .next = < (N + 1) > .
endfm

view Order from TRIV to ACTOR-MODEL is
  sort Elt to Msg .
endv

mod SCHEDULER is
  pr EXT-BOOL .
  pr META-LEVEL .
  pr ACTOR-MODEL .
  pr TERM-ORDER{Order} .

  sorts Scheduler ScheduleList .
  subsort LocScheduleMsg < ScheduleList .
  subsort Scheduler < Config .

  op  nil : -> ScheduleList .
  op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc id: nil format(d d n d)] .

  op {_|_} : Float ScheduleList -> Scheduler [format (n d d n d d)] .
  op insert : Scheduler LocScheduleMsg -> Scheduler .
  op insert : ScheduleList LocScheduleMsg -> ScheduleList .
  op insertList : Scheduler ScheduleList -> Scheduler .
  op insertList : ScheduleList ScheduleList -> ScheduleList .

  --- Emit a message, perform a rule, ad nauseum, until time-limit
  op run : Config Float -> Config .
  op step : Config -> Config [iter] .

  vars gt LIMIT : Float .
  vars t1 t2 : Delay .
  vars SL SL' : ScheduleList .
  vars M1 M2 : Msg .
  var S : Scheduler .
  var C : Config .
  vars A A' A1 A2 : Address .
  var T : ActorType .
  var AS : AttributeSet .
  var CO : Content .
  var AC : ActorConfig .
  var SM : ScheduleMsg .
  var AM : ActiveMsg .
  var LSM : LocScheduleMsg .

  ceq insert({gt | SL }, [ A1, [ t1 , M1 ] ]) =
    {gt | insert(SL,[ A1, [ gt plus t1 , M1 ] ] ) }
    if t1 == now or-else t1 >= 0.0 .
  eq insert([ A1, [ t1 , M1 ] ] ; SL , [ A2, [ t2 , M2 ] ]) =
    if (t1 lt t2) or ((t1 == t2)) and lt(M1,M2) then
      [ A1, [ t1 , M1 ] ] ; insert(SL, [ A2, [ t2 , M2 ] ])
    else
        ([ A2, [ t2 , M2 ] ] ; [ A1, [ t1 , M1 ] ] ; SL)
    fi .

  eq insert( nil , [A2, [ t2 , M2 ]]) = [A2, [ t2 , M2 ]] .

  eq insertList({gt | SL }, SL') = {gt | insertList(SL, SL') } .
  eq insertList(SL , [ A2, [ t2 , M2 ] ] ; SL') = insertList( insert(SL, [ A2, [ t2, M2 ] ]), SL' ) .
  eq insertList(SL , nil ) = SL .

  --- Transform a ScheduleMsg to a LocScheduleMsg one-level up
  eq < A : T | config: SM C, AS > = [ A, SM ] < A : T | config: C, AS > .
  --- At the top level add it with the constant Address "toplevel".
  eq SM C S = [ toplevel, SM ] C S .

  --- Pulling LocScheduleMsgs up:
  eq < A : T | config: LSM C, AS > = LSM < A : T | config: C, AS > .
  --- If the LocScheduleMsgs are at the toplevel, add them to the scheduler.
  --- eq LSM S = insert(S, LSM) .
  eq [A1, [ t1, A2 <- CO ]] S = insert(S, [A1, [ t1, A2 <- CO ]]) .

  --- Pushing the LocScheduleMsgs down.
  eq < A : T | config: C, AS > {A . A', AM} = < A : T | config: C {A . A', AM}, AS > .
  --- Insert the ScheduleMsg within the LocScheduleMsg if the correct
  --- object is reached.
  eq < A : T | config: C, AS > {A , AM} = < A : T | config: C AM, AS > .
  eq { toplevel, AM } S = AM S .

  eq step(AC {gt | [ A1, [ t1 , M1 ] ] ; SL}) =
    if t1 == now then
      { A1, { gt , M1 } } AC {gt | SL}
    else
      { A1, { t1 , M1 } } AC {t1 | SL}
    fi .

  --- the original version for ZooKeeper
  --- that forces our Cassandra code to have run(step(...),...)
  ---(
  eq run(AC {gt | SL}, LIMIT) =
    if (gt <= LIMIT) then
      run(step(AC {gt | SL}), LIMIT)
    else
      AC {gt | SL}
    fi .
  )
  ---
  eq run(AC {gt | SL}, LIMIT) =
    if (gt <= LIMIT and SL =/= nil) then
      run(step(AC {gt | SL}), LIMIT)
    else
      AC {gt | SL}
    fi .
  
endm

mod APMAUDE is
  pr ACTOR-MODEL .
  pr SCHEDULER .
  pr NAT .
  pr FLOAT .

  --- Operations supported by PVeStA
  op initState : -> Config .
  op sat : Nat Config -> Bool .
  op val : Nat Config -> Float .
  op tick : Config -> Config .
  op getTime : Config -> Float .
  op LIMIT : -> Float .

  var C : Config .
  var gt : Float .
  var SL : ScheduleList .

  eq tick(C) = run(C, getTime(C) + LIMIT) .
  eq getTime(C {gt | SL}) =  gt .
endm
